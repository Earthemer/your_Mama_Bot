import logging

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatType
from pydantic import ValidationError
from states.setup_state import SetupMama
from keyboards.setup_kb import get_cancel_keyboard, get_gender_keyboard, get_setup_keyboard
from core.validation import MamaName
from core.database import AsyncDatabaseManager

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == 'start_setup_in_group')
async def start_setup_dialog(callback: types.CallbackQuery, state: FSMContext):
    """
    –®–ê–ì 1: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ".
    """
    if callback.message.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.", show_alert=True)
        return

    chat_member = await callback.bot.get_chat_member(
        chat_id=callback.message.chat.id,
        user_id=callback.from_user.id
    )
    if chat_member.status not in ["creator", "administrator"]:
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –º–µ–Ω—è.", show_alert=True)
        return

    await state.clear()

    await state.update_data(admin_id=callback.from_user.id)

    await callback.answer()

    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ö–∞–∫ –º–µ–Ω—è –±—É–¥—É—Ç –∑–≤–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ?",
        reply_markup=get_cancel_keyboard()
    )

    await state.set_state(SetupMama.getting_mama_name)


@router.message(SetupMama.getting_mama_name)
async def get_mama_name(message: types.Message, state: FSMContext):
    """
    –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ú–∞–º—ã.
    """
    data = await state.get_data()
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
    print(f"DEBUG: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(data)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å. –ï—Å–ª–∏ –Ω–µ—Ç, —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.
    if not isinstance(data, dict):
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ FSM: data –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º! –ü–æ–ª—É—á–µ–Ω–æ: {data}")
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –≤ –≥–æ–ª–æ–≤–µ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–æ—Å—å. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, –≤ —ç—Ç–æ–π —Å–µ–º—å–µ –µ—â–µ –Ω–µ—Ç –º–∞–º—ã. –î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!",
            reply_markup=get_setup_keyboard()
        )
        return

    admin_id = data.get('admin_id')

    if message.from_user.id != admin_id:
        return

    try:
        validate_name = MamaName(name=message.text.strip())
        mama_name = validate_name.name

        await state.update_data(mama_name=mama_name)

        await message.answer(
            f"–¢–µ–ø–µ—Ä—å —è ‚Äî {mama_name}!\n"
            f"–•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –º–æ–µ–≥–æ —Å—ã–Ω–æ—á–∫–∞ –∏–ª–∏ –¥–æ—á–∫—É?\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å (reply) –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —á–∞—Ç–µ, –∏ —è –≤—Å—ë –ø–æ–π–º—É üòâ",
            parse_mode="HTML"
        )

        await state.set_state(SetupMama.choosing_child)

    except ValidationError as e:

        error_message = e.errors()[0]['msg']
        await message.answer(f"–û—à–∏–±–∫–∞: {error_message}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

@router.message(SetupMama.choosing_child)
async def choose_child(message: types.Message, state: FSMContext):
    """
    –®–ê–ì 3: –í—ã–±–æ—Ä "—Ä–µ–±–µ–Ω–∫–∞".
    """
    data = await state.get_data()
    admin_id = data.get('admin_id')

    if message.from_user.id != admin_id:
        return

    if not message.reply_to_message:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ '–æ—Ç–≤–µ—Ç–∏—Ç—å' (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.")
        return

    child_user = message.reply_to_message.from_user

    if child_user.is_bot:
        await message.answer("–Ø –Ω–µ –º–æ–≥—É –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –¥—Ä—É–≥–æ–º –±–æ—Ç–µ. –í—ã–±–µ—Ä–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await state.update_data(
        child_id=child_user.id,
        child_name=child_user.first_name
    )

    await message.answer(
        f"–ö–æ–Ω–µ—á–Ω–æ! –ö—Ç–æ —Ç—É—Ç –º–æ–π –ø–∏—Ä–æ–∂–æ—á–µ–∫? ‚Äî {child_user.first_name}. –ê —ç—Ç–æ –º–∞–ª—å—á–∏–∫ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(SetupMama.choosing_gender)

@router.callback_query(SetupMama.choosing_gender, F.data.startswith("gender_"))
async def choose_gender_and_save(callback: types.CallbackQuery, state: FSMContext, db: AsyncDatabaseManager):
    """
    –®–ê–ì 4: –í—ã–±–æ—Ä –ø–æ–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î.
    –õ–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ "gender_male" –∏–ª–∏ "gender_female".
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ callback_data
    gender = "male" if callback.data == "gender_male" else "female"

    user_data = await state.get_data()
    mama_name = user_data.get('mama_name')
    child_id = user_data.get('child_id')
    child_name = user_data.get('child_name')

    if not all([mama_name, child_id, child_name]):
        await callback.message.edit_text("–û–π, —è —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–Ω–∞—á–∞–ª–∞. /start")
        await state.clear()
        return

    try:
        await db.upsert_mama_config(
            chat_id=callback.message.chat.id,
            bot_name=mama_name,
            child_user_id=child_id,
            child_first_name=child_name,
            gender=gender
        )
        gender_text = '—Å—ã–Ω–æ—á–∫–æ–º' if gender == 'male' else '–¥–æ—á–µ–Ω—å–∫–æ–π'
        await callback.message.edit_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –Ø ‚Äî {mama_name}, –∏ —è –±—É–¥—É –ø—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞ –º–æ–∏–º {gender_text} {child_name}!")

    except Exception as e:
        logger.error(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —á–∞—Ç–∞ {callback.message.chat.id}: {e}", exc_info=True)
        await callback.message.edit_text(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–µ–π –∑–∞–ø–∏—Å–Ω–æ–π –∫–Ω–∏–∂–∫–æ–π... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start")

    finally:
        await state.clear()



